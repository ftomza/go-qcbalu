// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	mbs "github.com/ftomza/go-qcbalu/pkg/mbs"
	mock "github.com/stretchr/testify/mock"
)

// RPCService is an autogenerated mock type for the RPCService type
type RPCService struct {
	mock.Mock
}

// AddMethod provides a mock function with given fields: path, fn
func (_m *RPCService) AddMethod(path string, fn mbs.RPCMethod) mbs.RPCService {
	ret := _m.Called(path, fn)

	var r0 mbs.RPCService
	if rf, ok := ret.Get(0).(func(string, mbs.RPCMethod) mbs.RPCService); ok {
		r0 = rf(path, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mbs.RPCService)
		}
	}

	return r0
}

// Executor provides a mock function with given fields:
func (_m *RPCService) Executor() mbs.Executor {
	ret := _m.Called()

	var r0 mbs.Executor
	if rf, ok := ret.Get(0).(func() mbs.Executor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mbs.Executor)
		}
	}

	return r0
}

// Run provides a mock function with given fields:
func (_m *RPCService) Run() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields:
func (_m *RPCService) Shutdown() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
